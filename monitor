#!/usr/bin/env node

async function main() {
    const speech = require('@google-cloud/speech');
    const fs = require('fs');
    const spawn = require('child_process').spawn;

    const base_path = '/home/runz.org/quantum';

    const log = fs.createWriteStream('/home/runz.org/quantum/.local/speech.log', {
        'flags': 'a',
        'encoding': null,
        'mode': 0777,
    });

    const uid = process.argv[2];
    const phone = process.argv[3];
    const operator = process.argv[4];
    fs.writeFile(base_path + '/.local/pid/' + uid, process.pid, () => {});

    const php = spawn(base_path + '/cli', ['call']);

    php.stdin.write(JSON.stringify({
        action: "start",
        call_id: uid,
        phone: phone,
        operator: operator,
    }) + `\n`);
    php.stdin.end();

    // так можно без астериска тестить: monitor 123 79161234567 101
    //const fileName = base_path + '/.local/audio/test.raw';
    //fs.createReadStream(fileName).pipe(new speech.SpeechClient({

    process.stdin.pipe(new speech.SpeechClient({
            "keyFile": '/home/runz.org/quantum/.local/speech-to-text.json',
        })
        .streamingRecognize({
            config: {
                encoding: 'LINEAR16',
                sampleRateHertz: 8000,
                languageCode: 'ru-RU',
            },
            interimResults: false,
        })
        .on('error', console.error)
        .on('data', (data) => {
            if (!data.results[0] || !data.results[0].alternatives[0]) {
                throw new Error('Reached transcription time limit');
            }

            let transcript = data.results[0].alternatives[0].transcript;
            const php = spawn(base_path + '/cli', ['call']);
            php.stdin.write(JSON.stringify({
                action: "recommend",
                call_id: uid,
                phone: phone,
                operator: operator,
                transcription: transcript,
            }) + `\n`);
            php.stdin.end();
        })
    );
}

main().catch(console.error);
